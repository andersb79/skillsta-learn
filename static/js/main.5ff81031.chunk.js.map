{"version":3,"sources":["components/Number.js","components/Game.js","models/Level.js","models/LevelStore.js","App.js","serviceWorker.js","index.js"],"names":["Number","state","randomNumber","generateRandomNumber","min","max","random","Math","floor","_this","setState","setTimeout","this","bind","console","log","props","store","levels","visible","react_default","a","createElement","className","Component","observer","useStyles","makeStyles","theme","card","maxWidth","marginTop","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","Game","_ref","classes","_React$useState","React","useState","_React$useState2","Object","slicedToArray","expanded","setExpanded","handleExpandClick","map","level","i","Card","CardHeader","Avatar","aria-label","action","IconButton","MoreVert_default","type","name","id","title","subheader","category","CardContent","style","position","paddingBottom","top","left","width","src","link","frameBorder","Typography","variant","color","component","details","CardActions","disableSpacing","Star_default","clsx","defineProperty","onClick","aria-expanded","ExpandMore_default","Collapse","in","timeout","unmountOnExit","paragraph","Level","types","model","integer","string","is_done","actions","self","markDone","views","status","LevelStore","array","test","add","push","App","_useState","_useState2","menuSelected","data","toJSON","number","components_Number","game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ff81031.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nclass Number extends Component {\r\n  state = {\r\n    randomNumber: 0\r\n  };\r\n\r\n  generateRandomNumber = (min, max) => {\r\n    const random = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    this.setState({\r\n      randomNumber: random\r\n    });\r\n  };\r\n\r\n  render() {\r\n    setTimeout(this.generateRandomNumber.bind(this, 1, 10), 3000);\r\n\r\n    console.log(\"numbers\", this.props.store.levels);\r\n\r\n    if (this.props.visible) {\r\n       return <div className=\"number\">{this.state.randomNumber}</div>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        trams\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(Number);\r\n","import React, { Component } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { red } from \"@material-ui/core/colors\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport StarIcon from \"@material-ui/icons/Star\";\r\nimport ShareIcon from \"@material-ui/icons/Share\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    maxWidth: 345,\r\n    marginTop: \"10px\"\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: \"56.25%\" // 16:9\r\n  },\r\n  expand: {\r\n    transform: \"rotate(0deg)\",\r\n    marginLeft: \"auto\",\r\n    transition: theme.transitions.create(\"transform\", {\r\n      duration: theme.transitions.duration.shortest\r\n    })\r\n  },\r\n  expandOpen: {\r\n    transform: \"rotate(180deg)\"\r\n  },\r\n  avatar: {\r\n    backgroundColor: red[500]\r\n  }\r\n}));\r\n\r\nexport default function Game({ store }) {\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  function handleExpandClick() {\r\n    setExpanded(!expanded);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {store.levels.map((level, i) => (\r\n        <Card className={classes.card}>\r\n          <CardHeader\r\n            avatar={\r\n              <Avatar aria-label=\"Recipe\" className={classes.avatar}>\r\n                {level.level}\r\n              </Avatar>\r\n            }\r\n            action={\r\n              <IconButton aria-label=\"Settings\">\r\n                <MoreVertIcon />\r\n                <input type=\"file\" name=\"test\" id=\"testFile\" />\r\n              </IconButton>\r\n            }\r\n            title={level.name}\r\n            subheader={level.category}\r\n          />\r\n          <CardContent>\r\n            <div\r\n              className=\"video\"\r\n              style={{\r\n                position: \"relative\",\r\n                paddingBottom: \"56.25%\" /* 16:9 */,\r\n                paddingTop: 25,\r\n                height: 0\r\n              }}\r\n            >\r\n              <iframe\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: 0,\r\n                  left: 0,\r\n                  width: \"100%\",\r\n                  height: \"100%\"\r\n                }}\r\n                src={level.link}\r\n                frameBorder=\"0\"\r\n              />\r\n            </div>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n              {level.details}\r\n            </Typography>\r\n          </CardContent>\r\n          <CardActions disableSpacing>\r\n            <IconButton aria-label=\"Add to favorites\">\r\n              <StarIcon color=\"secondary\" />\r\n              <StarIcon color=\"disabled\" />\r\n              <StarIcon color=\"disabled\" />\r\n              <StarIcon color=\"disabled\" />\r\n              <StarIcon color=\"disabled\" />\r\n            </IconButton>\r\n            <IconButton\r\n              className={clsx(classes.expand, {\r\n                [classes.expandOpen]: expanded\r\n              })}\r\n              onClick={handleExpandClick}\r\n              aria-expanded={expanded}\r\n              aria-label=\"Show more\"\r\n            >\r\n              <ExpandMoreIcon />\r\n            </IconButton>\r\n          </CardActions>\r\n          <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n            <CardContent>\r\n              <Typography paragraph>Gör så här</Typography>\r\n              <Typography paragraph>och så här</Typography>\r\n              <Typography paragraph>och så här</Typography>\r\n              <Typography>tada</Typography>\r\n            </CardContent>\r\n          </Collapse>\r\n        </Card>       \r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import { types } from \"mobx-state-tree\";\r\nconst Level = types\r\n  .model(\"Level\", {\r\n    level: types.integer,\r\n    details: types.string,\r\n    is_done: false,\r\n    name: types.string,\r\n    link: types.string,\r\n    category: types.string\r\n  })\r\n  .actions(self => ({\r\n    markDone() {\r\n      self.is_done = true;\r\n    }\r\n  }))\r\n  .views(self => ({\r\n    status() {\r\n      return self.is_done ? \"Done\" : \"Not Done\";\r\n    }\r\n  }));\r\nexport default Level;\r\n","import { types } from \"mobx-state-tree\";\r\nimport Level from \"./Level\";\r\n\r\nconst LevelStore = types\r\n  .model(\"LevelStore\", {\r\n    levels: types.array(Level)\r\n  })\r\n  .views(self => ({\r\n    get test() {        \r\n      return \"testing\";\r\n    }\r\n  }))\r\n  .actions(self => ({\r\n    add(level) {\r\n      self.levels.push(level);\r\n    }\r\n  }));\r\nexport default LevelStore;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Number from \"./components/Number\";\r\nimport Game from \"./components/Game\";\r\nimport { slide as Menu } from \"react-burger-menu\";\r\nimport LevelStore from \"./models/LevelStore\";\r\nimport data from \"./models/data.json\";\r\n\r\nfunction App() {\r\n  const [menuSelected, setMenuSelected] = useState(\"Game\");\r\n\r\n  const store = LevelStore.create(data);\r\n\r\n  console.log(\"levels\", store.levels.toJSON());\r\n\r\n  const number =\r\n    menuSelected === \"Number\" ? <Number visible={true} store={store} /> : null;\r\n  const game = menuSelected === \"Game\" ? <Game store={store} /> : null;\r\n\r\n  return (\r\n    <div id=\"outer-container\">      \r\n      <main id=\"page-wrap\">\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            {number}\r\n\r\n            {game}\r\n          </header>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}