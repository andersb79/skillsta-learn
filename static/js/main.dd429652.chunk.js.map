{"version":3,"sources":["components/Number.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Number","state","randomNumber","generateRandomNumber","min","max","random","Math","floor","_this","setState","setTimeout","this","bind","props","visible","react_default","a","createElement","className","Component","Game","App","_useState","useState","_useState2","Object","slicedToArray","menuSelected","setMenuSelected","number","components_Number","game","components_Game","_useState3","_useState4","id","BurgerMenu","pageWrapId","outerContainerId","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAyBeA,6MAtBbC,MAAQ,CACNC,aAAc,KAGhBC,qBAAuB,SAACC,EAAKC,GAC3B,IAAMC,EAASC,KAAKC,MAAMD,KAAKD,UAAYD,EAAMD,EAAM,IAAMA,EAC7DK,EAAKC,SAAS,CACZR,aAAcI,6EAOhB,OAFAK,WAAWC,KAAKT,qBAAqBU,KAAKD,KAAM,EAAG,IAAK,KAEpDA,KAAKE,MAAMC,QACNC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUP,KAAKX,MAAMC,cAGtCc,EAAAC,EAAAC,cAAA,2BAnBUE,aCqCNC,mLAlCX,OAAOL,EAAAC,EAAAC,cAAA,ozBAHQE,qBCkCJE,MA7Bf,WAAe,IAAAC,EAE2BC,mBAAS,QAFpCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAENK,EAFMH,EAAA,GAEQI,EAFRJ,EAAA,GAIPK,EAA0B,WAAjBF,EAA4BZ,EAAAC,EAAAC,cAACa,EAAD,CAAQhB,SAAS,IAAW,KACjEiB,EAAwB,SAAjBJ,EAA0BZ,EAAAC,EAAAC,cAACe,EAAD,MAAW,KALrCC,EAMaV,mBAAS,GANtBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GASb,OATaC,EAAA,GAAAA,EAAA,GAUXnB,EAAAC,EAAAC,cAAA,OAAKkB,GAAG,mBACVpB,EAAAC,EAAAC,cAACmB,EAAA,MAAD,CAAMC,WAAa,YAAcC,iBAAmB,mBAC9CvB,EAAAC,EAAAC,cAAA,KAAGkB,GAAG,SAASjB,UAAU,YAAYqB,QAAS,kBAAMX,EAAgB,YAApE,UACAb,EAAAC,EAAAC,cAAA,KAAGkB,GAAG,OAAOjB,UAAU,YAAYqB,QAAS,kBAAMX,EAAgB,UAAlE,SAENb,EAAAC,EAAAC,cAAA,QAAMkB,GAAG,aACTpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACfW,EACAE,OCdWS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dd429652.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Number extends Component {\r\n  state = {\r\n    randomNumber: 0\r\n  };\r\n\r\n  generateRandomNumber = (min, max) => {\r\n    const random = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    this.setState({\r\n      randomNumber: random\r\n    });\r\n  };\r\n\r\n  render() {\r\n    setTimeout(this.generateRandomNumber.bind(this, 1, 10), 3000);\r\n\r\n    if (this.props.visible) {\r\n      return <div className=\"number\">{this.state.randomNumber}</div>;\r\n    }\r\n\r\n    return <div>trams</div>;\r\n  }\r\n}\r\n\r\nexport default Number;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Game extends Component {\r\n  render() {\r\n       \r\n    return <div>\r\n\r\nLevel 1\r\nToe Taps\t\t60 sec\r\nKeeping the ball stationary, tap the top of the ball with the soles of both feet\r\n\r\nLevel 2\r\nBell Taps\t\t60 sec\r\nTransfer ball from side to side in a “bell ringing” motion, using the inside of both feet\r\n\r\nLevel 3\r\nInside Outside\t\t60 sec\r\nMove the ball between both feet using the inside and outside of the foot\r\n\r\nLevel 4\r\nRocking Sole \t\t60 sec\r\nRock the ball from side to side using the sole of the foot\r\n\r\nLevel 5\r\nSole Rolls\t\t60 sec\r\nTransfer the ball from one foot to the other by rolling the foot over the ball\r\n\r\nLevel 6\r\nSole Inside Push\t60 sec\r\nTrap the ball underneath the foot and roll foot outwards to push ball across with the inside of foot\r\n\r\nLevel 7\r\nBrazilian Trap\t\t60 sec\r\nRoll the ball across the body then trap the ball with the opposite sole of the foot behind standing leg\r\n\r\n    </div>;\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Number from \"./components/Number\";\r\nimport Game from \"./components/Game\";\r\nimport { slide as Menu } from 'react-burger-menu'\r\n\r\n\r\nfunction App() {\r\n\r\n  const [menuSelected, setMenuSelected] = useState('Game');\r\n\r\n  const number = menuSelected === 'Number' ? <Number visible={true} /> : null;\r\n  const game = menuSelected === 'Game' ? <Game /> : null;\r\n  const [count, setCount] = useState(0);\r\n  \r\n\r\n  return (\r\n    <div id=\"outer-container\">\r\n  <Menu pageWrapId={ \"page-wrap\" } outerContainerId={ \"outer-container\" } >  \r\n        <a id=\"number\" className=\"menu-item\" onClick={() => setMenuSelected('Number')}>Number</a>\r\n        <a id=\"game\" className=\"menu-item\" onClick={() => setMenuSelected('Game')}>Game</a>\r\n  </Menu>\r\n  <main id=\"page-wrap\">\r\n  <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {number}\r\n        {game}\r\n      </header>\r\n    </div>\r\n  </main>\r\n</div>\r\n   \r\n   \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}